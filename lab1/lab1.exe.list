EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab1.exe -- emu8086 assembler version: 4.05  
 
[ 01.04.2025  --  23:47:15 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]        :                                       
[   5]    0100: 45 6E 74 65 72 20 61 20 6C 69 6E 65   message_input  db "Enter a line for sorting: $"
                20 66 6F 72 20 73 6F 72 74 69 6E 67 
                3A 20 24                            
[   6]    011B: 52 65 73 75 6C 74 3A 20 24            message_output db "Result: $"
[   7]    0124: 45 72 72 6F 72 21 20 24               message_error  db "Error! $"
[   8]    012C: 59 6F 75 72 20 6C 69 6E 65 3A 20 24   message_source db "Your line: $"
                                                    
[   9]    0138: 0A 0D 24                              endline        db 10, 13, '$'
[  10]        :                                       
[  11]        :                                       ;áóôåð íà 200 ñèìâîëîâ
[  12]        :                                       size equ 200
[  13]    013B: 24 24 24 24 24 24 24 24 24 24 24 24   line db size DUP('$')
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24 24 24 24 24 
                24 24 24 24 24 24 24 24             
[  14]        :                                       
[  15]        :                                       .code
[  16]        :                                       output macro str ;âûâîä ñòðîêè
[  17]        :                                       mov ah, 9
[  18]        :                                       mov dx, offset str
[  19]        :                                       int 21h
[  20]        :                                       endm
[  21]        :                                       
[  22]        :                                       input macro str ;ââîä ñòðîêè
[  23]        :                                       mov ah, 0Ah
[  24]        :                                       mov dx, offset str
[  25]        :                                       int 21h
[  26]        :                                       endm
[  27]        :                                       
[  28]    0210:                                       start:
[  29]    0210: B8 10 00                              mov ax, @data
[  30]    0213: 8E D8                                 mov ds, ax
[  31]    0215: 8E C0                                 mov es, ax
[  32]        :                                       
[  33]    0217: B4 09 BA 00 00 CD 21                  output message_input
[  34]    021E: C6 06 3B 00 C5                        mov line[0], 197
[  35]        :                                       
[  36]    0223: B4 0A BA 3B 00 CD 21                  input line
[  37]    022A: 80 3E 3E 00 24                        cmp line[3], '$'
[  38]    022F: 75 03 E9 05 01                        je error_end
[  39]    0234: BE 3B 00                              lea SI, line
[  40]    0237: 46                                    inc si
[  41]    0238: 46                                    inc si
[  42]    0239: E9 EA 00                              jmp check_loop
[  43]        :                                       
[  44]    023C:                                       str:
[  45]    023C: B8 03 00                              mov ax, 3
[  46]    023F: CD 10                                 int 10h
[  47]        :                                       
[  48]    0241: B4 09 BA 2C 00 CD 21                  output message_source
[  49]    0248: B4 09                                 mov ah, 9
[  50]    024A: BA 3D 00                              mov dx, offset line + 2
[  51]    024D: CD 21                                 int 21h
[  52]        :                                       
[  53]    024F: B4 09 BA 38 00 CD 21                  output endline
[  54]    0256: B4 09 BA 38 00 CD 21                  output endline
[  55]    025D: EB 00                                 jmp main_loop
[  56]        :                                       
[  57]    025F:                                       main_loop:
[  58]    025F: B4 09                                 mov ah, 9
[  59]    0261: BA 3D 00                              mov dx, offset line + 2
[  60]    0264: CD 21                                 int 21h
[  61]    0266: B4 09 BA 38 00 CD 21                  output endline
[  62]        :                                       ;çàíóëÿåì ðåãèñòðû
[  63]    026D: 33 F6                                 xor si, si
[  64]    026F: 33 FF                                 xor di, di
[  65]    0271: 33 C0                                 xor ax, ax
[  66]    0273: 33 D2                                 xor dx, dx
[  67]    0275: BE 3D 00                              mov si, offset line + 2 ;ds:si - íà÷àëî ñòðîêè
[  68]        :                                       
[  69]    0278:                                       first_word:
[  70]    0278: 80 3C 09                              cmp byte ptr[si], 9
[  71]    027B: 75 03 E9 B9 00                        je error_end
[  72]        :                                       
[  73]    0280: 80 3C 20                              cmp byte ptr[si], ' '
[  74]    0283: 75 1E                                 jne check_compare ;åñëè ñèìâîë íå ïðîáåë
[  75]    0285: 46                                    inc si
[  76]        :                                       
[  77]    0286: 80 3C 0D                              cmp byte ptr[si], 13
[  78]    0289: 75 03 E9 B9 00                        je the_end ;åñëè êîíåö ñòðîêè - ê êîíöó ïðîãðàììû
[  79]        :                                       
[  80]    028E: EB E8                                 jmp first_word
[  81]        :                                       
[  82]    0290:                                       loop_per_line:
[  83]    0290: 46                                    inc si
[  84]    0291: 80 3C 20                              cmp byte ptr[si], ' '
[  85]    0294: 74 18                                 je check_whitespace ;åñëè ïðîáåë
[  86]    0296: 80 3C 0D                              cmp byte ptr[si], 13
[  87]    0299: 75 F5                                 jne loop_per_line
[  88]    029B: 3D 00 00                              cmp ax, 0
[  89]    029E: 75 BF                                 jne main_loop
[  90]    02A0: E9 A4 00                              jmp the_end ;åñëè êîíåö ñòðîêè, òî âûõîä
[  91]        :                                       
[  92]    02A3:                                       check_compare:
[  93]    02A3: 83 FA 00                              cmp dx, 0
[  94]    02A6: 75 0F                                 jne compare ;åñëè åñòü äâà ñëîâà, òî ñðàâíèâàåì
[  95]    02A8: 56                                    push si ;çàíîñèì àäðåñ ïåðâîãî ñëîâà â ñòåê
[  96]    02A9: BA 01 00                              mov dx, 1
[  97]    02AC: EB E2                                 jmp loop_per_line
[  98]        :                                       
[  99]    02AE:                                       check_whitespace:
[ 100]    02AE: 80 7C 01 20                           cmp byte ptr[si+1], ' '
[ 101]    02B2: 74 DC                                 je loop_per_line ;åñëè íåñêîëüêî ïðîáåëîâ, èä¸ì äàëüøå
[ 102]    02B4: 46                                    inc si ;àäðåñ âòîðîãî ñëîâà
[ 103]    02B5: EB EC                                 jmp check_compare
[ 104]        :                                       
[ 105]    02B7:                                       compare:
[ 106]    02B7: 5F                                    pop di ;èçâëåêàåì â es:di àäðåñ ïåðâîãî ñëîâà
[ 107]    02B8: 56                                    push si ;ïîìåùàåì â ñòåê àäðåñ âòîðîãî è ïåðâîãî ñëîâà
[ 108]    02B9: 57                                    push di
[ 109]    02BA: 8B CE                                 mov cx, si
[ 110]    02BC: 2B CF                                 sub cx, di
[ 111]    02BE: F3 A6                                 repe cmpsb ;ñðàâíèâàòü ïîêà ñèìâîëû ðàâíû
[ 112]    02C0: 4E                                    dec si
[ 113]    02C1: 4F                                    dec di
[ 114]    02C2: 33 DB                                 xor bx, bx
[ 115]    02C4: 8A 1D                                 mov bl,byte ptr[di]
[ 116]    02C6: 3A 1C                                 cmp bl, byte ptr[si]
[ 117]    02C8: 7F 05                                 jg change ;ïåðåñòàâëÿåì åñëè ïåðâîå ñëîâî > âòîðîãî
[ 118]    02CA: 5F                                    pop di
[ 119]    02CB: 5E                                    pop si
[ 120]    02CC: 56                                    push si
[ 121]        :                                       
[ 122]    02CD: EB C1                                 jmp loop_per_line
[ 123]        :                                       
[ 124]    02CF:                                       change:
[ 125]    02CF: FE C0                                 inc al
[ 126]    02D1: 5F                                    pop di
[ 127]    02D2: 5E                                    pop si
[ 128]        :                                       
[ 129]    02D3: 33 C9                                 xor cx, cx
[ 130]    02D5: 33 DB                                 xor bx, bx
[ 131]    02D7: 8B D6                                 mov dx, si ;âòîðîå ñëîâî
[ 132]    02D9:                                       loop1: ;ïîèñê íà÷àëà âòîðîãî ñëîâà
[ 133]    02D9: 4E                                    dec si
[ 134]    02DA: 41                                    inc cx
[ 135]    02DB: 80 7C FF 20                           cmp byte ptr [si-1], ' '
[ 136]    02DF: 74 F8                                 je loop1
[ 137]        :                                       
[ 138]    02E1:                                       loop2:
[ 139]    02E1: 4E                                    dec si
[ 140]    02E2: 8A 1C                                 mov bl, byte ptr [si]
[ 141]    02E4: 53                                    push bx ;ïîìåùàåì ïåðâîå ñëîâî â ñòåê (ñ êîíöà, åñòåñòâåííî)
[ 142]    02E5: FE C4                                 inc ah ;äëèíà ïåðâîãî ñëîâà
[ 143]    02E7: 3B F7                                 cmp si, di
[ 144]    02E9: 75 F6                                 jne loop2
[ 145]        :                                       
[ 146]    02EB: 8B F2                                 mov si, dx ;dx = àäðåñ íà÷àëà âòîðîãî ñëîâà
[ 147]        :                                       
[ 148]    02ED:                                       loop3:  ;âòîðîå ñëîâî íà ïåðâîå
[ 149]    02ED: 80 3C 0D                              cmp byte ptr [si], 13
[ 150]    02F0: 74 0B                                 je loop4
[ 151]    02F2: 8A 1C                                 mov bl, byte ptr [si]
[ 152]    02F4: 86 1D                                 xchg byte ptr [di], bl
[ 153]        :                                       
[ 154]    02F6: 46                                    inc si
[ 155]    02F7: 47                                    inc di
[ 156]    02F8: 80 3C 20                              cmp  byte ptr [si], ' '
[ 157]    02FB: 75 F0                                 jne loop3
[ 158]        :                                       
[ 159]    02FD:                                       loop4:
[ 160]    02FD: C6 05 20                              mov byte ptr[di], ' '
[ 161]    0300: 47                                    inc di
[ 162]    0301: E2 FA                                 loop loop4
[ 163]        :                                       
[ 164]    0303: 8B F7                                 mov si, di
[ 165]    0305: 8B D6                                 mov dx, si
[ 166]    0307: 4E                                    dec si
[ 167]    0308:                                       loop5: ;ïåðâîå ñëîâî íà âòîðîå èç ñòåêà
[ 168]    0308: 46                                    inc si
[ 169]    0309: 80 3C 0D                              cmp byte ptr[si], 13
[ 170]    030C: 75 03 E9 4E FF                        je main_loop
[ 171]        :                                       
[ 172]    0311: 5B                                    pop bx
[ 173]    0312: 88 1C                                 mov byte ptr[si], bl
[ 174]        :                                       
[ 175]    0314: FE CC                                 dec ah
[ 176]    0316: 80 FC 00                              cmp ah, 0
[ 177]    0319: 74 02                                 je loop6
[ 178]        :                                       
[ 179]    031B: EB EB                                 jmp loop5
[ 180]        :                                       
[ 181]    031D:                                       loop6:
[ 182]    031D: 52                                    push dx
[ 183]    031E: BA 01 00                              mov dx, 1
[ 184]    0321: 33 C9                                 xor cx, cx
[ 185]    0323: E9 6A FF                              jmp loop_per_line
[ 186]        :                                       
[ 187]    0326:                                       check_loop:
[ 188]    0326: 80 3C 09                              cmp [si], 9
[ 189]    0329: 74 09                                 je tab_to_space
[ 190]    032B: 46                                    inc si
[ 191]        :                                       
[ 192]    032C: 80 3C 24                              cmp [si], '$'
[ 193]    032F: 75 F5                                 jne check_loop
[ 194]    0331: E9 08 FF                              jmp str
[ 195]        :                                       
[ 196]    0334:                                       tab_to_space:
[ 197]    0334: C6 04 20                              mov [si], 32
[ 198]    0337: EB ED                                 jmp check_loop
[ 199]        :                                       
[ 200]    0339:                                       error_end:
[ 201]    0339: B8 03 00                              mov ax, 3
[ 202]    033C: CD 10                                 int 10h
[ 203]    033E: B4 09 BA 24 00 CD 21                  output message_error
[ 204]    0345: EB 1B                                 jmp endend
[ 205]        :                                       
[ 206]    0347:                                       the_end:
[ 207]    0347: B4 09 BA 38 00 CD 21                  output endline
[ 208]    034E: B4 09 BA 1B 00 CD 21                  output message_output
[ 209]        :                                       
[ 210]    0355: B4 09                                 mov ah, 9
[ 211]    0357: BA 3D 00                              mov dx, offset line + 2
[ 212]    035A: CD 21                                 int 21h
[ 213]        :                                       
[ 214]    035C: B4 4C                                 mov ah, 4Ch
[ 215]    035E: CD 21                                 int 21h
[ 216]    0360: EB 00                                 jmp endend
[ 217]        :                                       
[ 218]    0362:                                       endend:
[ 219]        :                                       end start
[ 220]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 62      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: F5      -   check sum (l.byte)
0013: 14      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 21      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 21      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
